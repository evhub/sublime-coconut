{
	"scope": "source.coconut",

	"completions": [
        { "trigger": "map\tmap(f, *iterables)", "contents": "map(${1:f}, ${2:*iterables})" },
        { "trigger": "starmap\tstarmap(f, *iterables)", "contents": "starmap(${1:f}, ${2:*iterables})" },
        { "trigger": "parallel_map\tparallel_map(f, *iterables)", "contents": "parallel_map(${1:f}, ${2:*iterables})" },
        { "trigger": "concurrent_map\tconcurrent_map(f, *iterables)", "contents": "concurrent_map(${1:f}, ${2:*iterables})" },
        { "trigger": "zip\tzip(iter1, iter2, ...)", "contents": "zip(${1:iter1}, ${2:iter2, ...})" },
        { "trigger": "zip_longest\tzip_longest(iter1, iter2, ...)", "contents": "zip_longest(${1:iter1}, ${2:iter2, ...})" },
        { "trigger": "filter\tfilter(f, iterable)", "contents": "filter(${1:f}, ${2:iterable})" },
        { "trigger": "reversed\treversed(iterable)", "contents": "reversed(${1:iterable})" },
        { "trigger": "enumerate\tenumerate(iterable, [start=0])", "contents": "enumerate(${1:iterable}, ${2:start=0})" },
        { "trigger": "reduce\treduce(f, iterable, [init])", "contents": "reduce(${1:f}, ${2:iterable}, ${3:init})" },
        { "trigger": "scan\tscan(f, iterable, [init])", "contents": "scan(${1:f}, ${2:iterable}, ${3:init})" },
        { "trigger": "takewhile\ttakewhile(f, iterable)", "contents": "takewhile(${1:f}, ${2:iterable})" },
        { "trigger": "dropwhile\tdropwhile(f, iterable)", "contents": "dropwhile(${1:f}, ${2:iterable})" },
        { "trigger": "tee\ttee(iterable, [n=2])", "contents": "tee(${1:iterable}, ${2:n=2})" },
        { "trigger": "consume\tconsume(iterable, [keep_last=0])", "contents": "consume(${1:iterable}, ${2:keep_last=0})" },
        { "trigger": "count\tcount([start=0], [step=1])", "contents": "count(${1:start=0}, ${2:step=1})" },
        { "trigger": "fmap\tfmap(f, obj)", "contents": "fmap(${1:f}, ${2:obj})" },
        { "trigger": "groupsof\tgroupsof(n, it)", "contents": "groupsof(${1:n}, ${2:it})" },
        { "trigger": "makedata\tmakedata(cls, *args)", "contents": "makedata(${1:cls}, ${2:*args})" },
        { "trigger": "reiterable\treiterable(it)", "contents": "reiterable(${1:it})" },
        { "trigger": "addpattern\taddpattern def f(x)", "contents": "addpattern def${1:f}(${2:x})" },
        { "trigger": "recursive_iterator\trecursive_iterator", "contents": "recursive_iterator" },
        { "trigger": "memoize\tmemoize", "contents": "memoize" },
        { "trigger": "override\toverride", "contents": "override" },
        { "trigger": "->", "contents": "-> ${1:exp}" },
        { "trigger": "lambda\t(x) -> exp", "contents": "(${1:x}) -> ${2:exp}" },
        { "trigger": "()->", "contents": "(${1:x}) -> ${2:exp}" },
        { "trigger": "data", "contents": "data ${1:name}(${2:args, *rest})" },
        { "trigger": "datafrom", "contents": "data ${1:name}(${2:args, *rest}) from ${3:parent}" },
        { "trigger": "set\ts{}", "contents": "s{$0}" },
        { "trigger": "frozenset\tf{}", "contents": "f{$0}" },
        { "trigger": "MatchError", "contents": "MatchError" },
        { "trigger": "TYPE_CHECKING", "contents": "TYPE_CHECKING" },
        "abs", "dict", "help", "min", "setattr",
        "all", "dir", "hex", "next", "slice",
        "any", "divmod", "id", "object", "sorted",
        "ascii", "enumerate", "input", "oct", "staticmethod",
        "bin", "eval", "int", "open", "str",
        "bool", "exec", "isinstance", "ord", "sum",
        "bytearray", "filter", "issubclass", "pow", "super",
        "bytes", "float", "iter", "print", "tuple",
        "callable", "format", "len", "property", "type",
        "chr", "frozenset", "list", "range", "vars",
        "classmethod", "getattr", "locals", "repr", "zip",
        "compile", "globals", "map", "reversed", "__import__",
        "complex", "hasattr", "max", "round",
        "delattr", "hash", "memoryview", "set", "breakpoint"
	]
}
