{
	"scope": "source.coconut",

	"completions": [
        { "trigger": "map\tmap(f, *iter)", "contents": "map(${1:f}, ${2:*iter})" },
        { "trigger": "parallel_map\tparallel_map(f, *iter)", "contents": "parallel_map(${1:f}, ${2:*iter})" },
        { "trigger": "concurrent_map\tconcurrent_map(f, *iter)", "contents": "concurrent_map(${1:f}, ${2:*iter})" },
        { "trigger": "zip\tzip(iter1, iter2, ...)", "contents": "zip(${1:iter1}, ${2:iter2, ...})" },
        { "trigger": "filter\tfilter(f, iter)", "contents": "filter(${1:f}, ${2:iter})" },
        { "trigger": "reversed\treversed(iter)", "contents": "reversed(${1:iter})" },
        { "trigger": "enumerate\tenumerate(iter, [start=0])", "contents": "enumerate(${1:iter}, ${2:start=0})" },
        { "trigger": "reduce\treduce(f, iter, [init])", "contents": "reduce(${1:f}, ${2:iter}, ${3:init})" },
        { "trigger": "takewhile\ttakewhile(f, iter)", "contents": "takewhile(${1:f}, ${2:iter})" },
        { "trigger": "dropwhile\tdropwhile(f, iter)", "contents": "dropwhile(${1:f}, ${2:iter})" },
        { "trigger": "tee\ttee(iter, [n=2])", "contents": "tee(${1:iter}, ${2:n=2})" },
        { "trigger": "consume\tconsume(iter, [keep_last=0])", "contents": "consume(${1:iter}, ${2:keep_last=0})" },
        { "trigger": "count\tcount([start=0], [step=1])", "contents": "count(${1:start=0}, ${2:step=1})" },
        { "trigger": "fmap\tfmap(f, obj)", "contents": "fmap(${1:f}, ${2:obj})" },
        { "trigger": "datamaker\tdatamaker(cls)", "contents": "datamaker(${1:cls})" },
        { "trigger": "addpattern\t@addpattern(f)", "contents": "@addpattern(${1:f})" },
        { "trigger": "recursive_iterator\t@recursive_iterator", "contents": "@recursive_iterator" },
        { "trigger": "->", "contents": "-> ${1:exp}" },
        { "trigger": "lambda\t(x) -> exp", "contents": "(${1:x}) -> ${2:exp}" },
        { "trigger": "()->", "contents": "(${1:x}) -> ${2:exp}" },
        { "trigger": "data", "contents": "data ${1:name}(${2:args, *rest})" },
        { "trigger": "datafrom", "contents": "data ${1:name}(${2:args, *rest}) from ${3:parent}" },
        { "trigger": "set\ts{}", "contents": "s{$0}" },
        { "trigger": "frozenset\tf{}", "contents": "f{$0}" },
        { "trigger": "MatchError", "contents": "MatchError" },
	]
}